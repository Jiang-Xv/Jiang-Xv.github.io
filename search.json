[{"title":"height:100%","url":"/2022/10/22/height-100/","content":"设为 height:100% 不能占满浏览器窗口当设为 height:100% 时，元素高度占满父元素的高度。若父元素高度未声明，则默认为 0，子元素也为 0。\nHTML 中设置\nhtml,body &#123;    height: 100%;&#125;\nVue 中建立 main.css 并全局使用\nhtml,body,#app &#123;    height: 100%;&#125;","tags":["CSS"]},{"title":"font简写","url":"/2022/10/22/font%E7%AE%80%E5%86%99/","content":"font 的值\n\n\nfont\n值\n\n\n\nfont-style\n规定字体样式\n\n\nfont-variant\n设置小型大写字母的字体显示文本\n\n\nfont-weight\n规定字体粗细。\n\n\nfont-size&#x2F;line-height\n规定字体尺寸和行高。\n\n\nfont-family\n规定字体系列。\n\n\ncaption\n定义被标题控件（比如按钮、下拉列表等）使用的字体。\n\n\nicon\n定义被图标标记使用的字体。\n\n\nmenu\n定义被下拉列表使用的字体。\n\n\nmessage-box\n定义被对话框使用的字体。\n\n\nsmall-caption\ncaption 字体的小型版本。\n\n\nstatus-bar\n定义被窗口状态栏使用的字体。\n\n\nfont的简写顺序font 应按以上表格的顺序进行简写，顺序不能改变，各属性使用空格进行隔开。简写时 font-size 与 line-height 之间使用 &#x2F; 分隔，不能分开写\n.fisher&#123;    font-style:italic;    font-variant:small-caps;    font-weight:700;    font-size:12px;    line-height:24px;    font-family:&quot;Microsoft YaHei&quot;;&#125;/* 简写 */.fisher&#123; font:italic small-caps 700 12px/24px &quot;Microsoft YaHei&quot;; &#125;","tags":["CSS"]},{"title":"VUE_APP_BASE_API","url":"/2022/10/21/VUE_BASE_API/","content":"process.envprocess.env 会返回包含用户环境的对象，来自 Node.js\n参考链接：http://nodejs.cn/api/process/process_env.html\nprocess.nev.VUE_APP_BASE_API项目需要在不同环境下进行运行(开发，生产，测试等)，process.nev.VUE_APP_BASE_API可以避免多次切换请求的地址以及相关的配置。\n当需要用到该变量时可以直接使用 process.nev.VUE_APP_BASE_API 进行取值\nconst service = axios.create(&#123;  // axios中请求配置有baseURL选项，表示请求URL公共部分  baseURL:  process.env.VUE_APP_BASE_API,  // 超时  timeout: 10000&#125;)\nVue-cli2直接在 config 文件进行配置\nVue-cli3&#x2F;4在根目录新建 .env.(NODE) 文件（NODE 为 development &#x2F; production &#x2F; test）\n# 开发环境配置ENV = &#x27;development&#x27;# 若依管理系统/开发环境VUE_APP_BASE_API = &#x27;/dev-api&#x27;# 路由懒加载VUE_CLI_BABEL_TRANSPILE_MODULES = true# 本地地址http://localhost:9002# 开发地址http://192.168.0.100:9002\n","tags":["Vue-cli"]},{"title":"将el-selector的值传给后端","url":"/2022/10/17/%E5%B0%86el-selector%E7%9A%84%E5%80%BC%E4%BC%A0%E7%BB%99%E5%90%8E%E7%AB%AF/","content":"新知识：JavaScript find 方法find() 方法返回通过测试（函数内判断）的数组的第一个元素的值。\nfind() 方法为数组中的每个元素都调用一次函数执行：\n\n当数组中的元素在测试条件时返回 true 时, find() 返回符合条件的元素，之后的值不会再调用执行函数。\n如果没有符合条件的元素返回 undefined\n\n代码：&lt;el-select        v-model=&quot;selector.value&quot;        placeholder=&quot;请选择年级&quot;        style=&quot;width: 13vw;&quot;        ref=&quot;gradeValue&quot;        @change=&quot;getLabel($event)&quot;&gt;    &lt;el-option            v-for=&quot;item in selector.options&quot;            :key=&quot;item.value&quot;            :label=&quot;item.label&quot;            :value=&quot;item.value&quot;    &gt;&lt;/el-option&gt;&lt;/el-select&gt;\nlet gradeValue = ref(&#123;&#125;)// 获取对应 option 的值，将符合的 item 返回给 gradeValue 对象function getLabel(e) &#123;      gradeValue = selector.options.find(item =&gt; &#123;        return item.value === e      &#125;)&#125;\n\n参考链接：https://blog.csdn.net/qq_42221334/article/details/97793457","tags":["Vue3"]},{"title":"数据添加 ref 但并不更新","url":"/2022/10/16/ref%E6%9B%B4%E6%96%B0%E6%95%B0%E6%8D%AE/","content":"问题描述：数据使用了 ref 进行更新，函数中数据值有变化，但 HTML 中组件状态未更新\n相关代码：\n&lt;el-alert type=&quot;error&quot; show-icon center v-if=&quot;codeError&quot;&gt;验证码错误！&lt;/el-alert&gt;\nlet codeError = ref(false)switch (res.data.code) &#123;    case 3:        codeError = true        break&#125;\n问题解决：更新应为 .value\nswitch (res.data.code) &#123;    case 3:        codeError.value = true        break&#125;","tags":["Vue3"]},{"title":"v-for循环el-col","url":"/2022/10/25/v-for%E5%BE%AA%E7%8E%AFel-col/","content":"问题描述使用 v-for 循环渲染后，在未改变 CSS 的情况下，直接写入的与通过 v-for 循环渲染的样式不同\n出现原因&lt;el-row class=&quot;contentContainer&quot; v-for=&quot;item in notice&quot;&gt;    &lt;el-col            class=&quot;contentTitle&quot;            :xs=&quot;20&quot; :sm=&quot;20&quot; :md=&quot;20&quot; :lg=&quot;20&quot; :xl=&quot;20&quot;            :title=&quot;item.title&quot;    &gt;        &#123;&#123; item.title &#125;&#125;    &lt;/el-col&gt;    &lt;el-col class=&quot;contentDate&quot;            :xs=&quot;4&quot; :sm=&quot;4&quot; :md=&quot;4&quot; :lg=&quot;4&quot; :xl=&quot;4&quot;    &gt;        &#123;&#123; item.date &#125;&#125;    &lt;/el-col&gt;&lt;/el-row&gt;\n\nnotice: [    &#123;title: &#x27;【通知】国家海洋局南海分局关于报送高级工程师任职资格评审材料的通知&#x27;&#125;,    &#123;date: &#x27;2022-10-23&#x27;&#125;,    &#123;title: &#x27;【通知】国家海洋局南海分局关于报送高级工程师任职资格评审材料的通知&#x27;&#125;,    &#123;date: &#x27;2022-10-23&#x27;&#125;]\n\n同一条数据的 title 与 note 分在了两个对象中，循环渲染时将每个 el-col 外都自动套上了一个 el-row，因此两个 el-col 分在了两行中\n解决方案将同一条数据的 title 与 data 写在一个对象中\nnotice: [    &#123;        title: &#x27;【通知】国家海洋局南海分局关于报送高级工程师任职资格评审材料的通知&#x27;,        date: &#x27;2022-10-23&#x27;    &#125;,    &#123;        title: &#x27;【通知】国家海洋局南海分局关于报送高级工程师任职资格评审材料的通知&#x27;,        date: &#x27;2022-10-23&#x27;    &#125;]\n\n","tags":["Vue2, Element-UI"]},{"title":"文字溢出部分以省略号显示","url":"/2022/10/25/%E6%96%87%E5%AD%97%E6%BA%A2%E5%87%BA%E9%83%A8%E5%88%86%E4%BB%A5%E7%9C%81%E7%95%A5%E5%8F%B7%E6%98%BE%E7%A4%BA/","content":"单行.test &#123;    overflow: hidden;    text-overflow: ellipsis;    white-space: nowrap&#125;    \n\n多行&lt;div id=&quot;con&quot;&gt;  &lt;span id=&quot;txt&quot;&gt;文本溢出显示省略号,文本溢出显示省略号,文本溢出显示省略号,文本溢出显示省略&lt;/span&gt;  &lt;span class=&quot;t&quot;&gt;&lt;/span&gt;&lt;/div&gt;\n#txt&#123;  display: inline-block;  height: 40px;  width: 250px;  line-height: 20px;  overflow: hidden;  font-size: 16px;&#125;.t:after&#123;  display: inline;  content: &quot;...&quot;;  font-size: 16px;\t&#125;\n\n参考链接https://www.cnblogs.com/yzg1/p/5089534.html\n","tags":["CSS"]},{"title":"在 Vue3 中利用 reactive 与 ref 实现数据动态更新","url":"/2022/10/16/%E6%95%B0%E6%8D%AE%E5%8A%A8%E6%80%81%E6%9B%B4%E6%96%B0/","content":"问题描述：&lt;el-alert type=&quot;success&quot; show-icon center v-if=&quot;successStatus&quot;&gt;邮件发送成功！&lt;/el-alert&gt;&lt;el-alert type=&quot;error&quot; show-icon center v-if=&quot;errorStatus&quot;&gt;邮件发送失败！&lt;/el-alert&gt;\n使用变量 true&#x2F;false 控制 el-alert 的显示，当变量初始化为 true 时，el-alert 正常显示，但通过函数改变变量 boolean 值时，值改变，el-alert 不能正常显示。\nasync function getVerifyCode() &#123;        let params = new URLSearchParams();        params.append(&quot;email&quot;, registerForm.eMail)        await getCode(params).then(res =&gt; &#123;            switch (res.data.code) &#123;                case 0:                    successStatus.value = false                    errorStatus.value = true                    break                case 1:                    successStatus.value = true                    errorStatus.value = false                    break            &#125;        &#125;)    &#125;\n初步解决方案：使用 reactive 实现数据的动态更新\n问题2：reactive 只支持对象类型的传入，不支持布尔值类型等基本数据类型的传入\nlet successStatus = reactive(false)    WebStorm 警告：    实参类型 boolean 不可分配给形参 object    浏览器控制台警告：    value cannot be made reactive: false\n而使用\nlet successStatus = reactive(&#123;        status:false    &#125;)\n时，虽然没有警告，但也不生效。\n解决方案：使用 ref 替代 reactive\nlet successStatus = ref(false)\n","tags":["Vue3"]}]